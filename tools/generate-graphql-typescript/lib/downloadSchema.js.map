{"version":3,"file":"downloadSchema.js","sourceRoot":"","sources":["../downloadSchema.ts"],"names":[],"mappings":";;AAAA,qCAAgF;AAChF,2BAAmC;AACnC,2CAA+B;AAE/B,oBAAK,CAAC,+BAA+B,EAAE;IACrC,MAAM,EAAE,MAAM;IACd,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;IAC/C,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;QACnB,SAAS,EAAE,EAAE;QACb,KAAK,EAAE,+BAAqB,CAAC,EAAE,YAAY,EAAE,KAAK,EAAE,CAAC;KACtD,CAAC;CACH,CAAC;KACC,IAAI,CAAC,CAAC,MAAW,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;KACpC,IAAI,CAAC,CAAC,MAAW,EAAE,EAAE;IACpB,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,GAAG,MAAM,CAAC;IACpC,OAAO,CAAC,GAAG,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC;IAC5B,MAAM,GAAG,GAAG,qBAAW,CAAC,2BAAiB,CAAC,UAAU,CAAC,CAAC,CAAC;IACvD,kBAAa,CAAC,kBAAkB,EAAE,GAAG,CAAC,CAAC;IACvC,yCAAyC;IAEzC,gEAAgE;IAChE,uEAAuE;IACvE,MAAM,KAAK,GAAG,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CACzC,CAAC,IAIA,EAAE,EAAE;QACH,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;QAC5B,MAAM,aAAa,GAAG,IAAI,CAAC,aAAa;YACtC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;gBAC3B,IAAI,EAAE,CAAC,CAAC,IAAI;aACb,CAAC,CAAC;YACL,CAAC,CAAC,IAAI,CAAC;QACT,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,aAAa,EAAE,CAAC;IACvC,CAAC,CACF,CAAC;IAEF,kBAAa,CACX,iCAAiC,EACjC,IAAI,CAAC,SAAS,CAAC;QACb,QAAQ,EAAE;YACR,KAAK;SACN;KACF,CAAC,CACH,CAAC;AACJ,CAAC,CAAC;KACD,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC","sourcesContent":["import { getIntrospectionQuery, buildClientSchema, printSchema } from 'graphql';\nimport { writeFileSync } from 'fs';\nimport fetch from 'node-fetch';\n\nfetch(`http://localhost:8000/graphql`, {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({\n    variables: {},\n    query: getIntrospectionQuery({ descriptions: false }),\n  }),\n})\n  .then((result: any) => result.json())\n  .then((result: any) => {\n    const { data: schemaJson } = result;\n    console.log({ schemaJson });\n    const sdl = printSchema(buildClientSchema(schemaJson));\n    writeFileSync('./schema.graphql', sdl);\n    // Write schema.graphql in the SDL format\n\n    // Write filteredSchema.json, a reduced schema for runtime usage\n    // See https://www.apollographql.com/docs/react/advanced/fragments.html\n    const types = schemaJson.__schema.types.map(\n      (type: {\n        name: string;\n        kind: string;\n        possibleTypes: [{ name: string }];\n      }) => {\n        const { name, kind } = type;\n        const possibleTypes = type.possibleTypes\n          ? type.possibleTypes.map(t => ({\n              name: t.name,\n            }))\n          : null;\n        return { name, kind, possibleTypes };\n      },\n    );\n\n    writeFileSync(\n      './filteredSchema.generated.json',\n      JSON.stringify({\n        __schema: {\n          types,\n        },\n      }),\n    );\n  })\n  .catch(console.error);\n"]}